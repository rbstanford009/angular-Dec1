{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class MovieService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.moviesUrl = 'api/movies'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET movie from the server */\n  getMovies() {\n    return this.http.get(this.moviesUrl).pipe(tap(_ => this.log('fetched movies')), catchError(this.handleError('getMovies', [])));\n  }\n  /** GET movie by id. Return `undefined` when id not found */\n  getMovieNo404(id) {\n    const url = `${this.moviesUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(movies => movies[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} movie id=${id}`);\n    }), catchError(this.handleError(`getMovie id=${id}`)));\n  }\n  /** GET Movie by id. Will 404 if id not found */\n  getMovie(id) {\n    const url = `${this.moviesUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched movie id=${id}`)), catchError(this.handleError(`getMovie id=${id}`)));\n  }\n  /** Log a MovieService message with the MessageService */\n  log(message) {\n    this.messageService.add(`MovieService: ${message}`);\n  }\n  /* GET movies whose name contains search term */\n  searchMovies(term) {\n    if (!term.trim()) {\n      // if not search term, return empty movie array.\n      return of([]);\n    }\n    return this.http.get(`${this.moviesUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found movies matching \"${term}\"`) : this.log(`no movies matching \"${term}\"`)), catchError(this.handleError('searchMovies', [])));\n  }\n  /** POST: add a new movie to the server */\n  addMovie(movie) {\n    return this.http.post(this.moviesUrl, movie, this.httpOptions).pipe(tap(newMovie => this.log(`added movie w/ id=${newMovie.id}`)), catchError(this.handleError('addMovie')));\n  }\n  /** DELETE: delete the movie from the server */\n  deleteMovie(id) {\n    const url = `${this.moviesUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted movie id=${id}`)), catchError(this.handleError('deleteMovie')));\n  }\n  /** PUT: update the movie on the server */\n  updateMovie(movie) {\n    return this.http.put(this.moviesUrl, movie, this.httpOptions).pipe(tap(_ => this.log(`updated movie id=${movie.id}`)), catchError(this.handleError('updateMovie')));\n  }\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  static #_ = this.ɵfac = function MovieService_Factory(t) {\n    return new (t || MovieService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MovieService,\n    factory: MovieService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","tap","MovieService","constructor","http","messageService","headers","getMovies","get","moviesUrl","pipe","_","log","handleError","getMovieNo404","id","url","movies","h","outcome","getMovie","message","add","searchMovies","term","trim","x","length","addMovie","movie","post","httpOptions","newMovie","deleteMovie","delete","updateMovie","put","operation","result","error","console","factory","providedIn"],"sourceRoot":"","sources":["C:\\Angular\\Wed1123\\src\\app\\movie.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\n\r\nimport { Movie } from './movie';\r\nimport { MessageService } from './message.service';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MovieService {\r\n\r\n  private moviesUrl = 'api/movies';  // URL to web api\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private messageService: MessageService) { }\r\n\r\n  /** GET movie from the server */\r\n  getMovies(): Observable<Movie[]> {\r\n    return this.http.get<Movie[]>(this.moviesUrl)\r\n      .pipe(\r\n        tap(_ => this.log('fetched movies')),\r\n        catchError(this.handleError<Movie[]>('getMovies', []))\r\n      );\r\n  }\r\n\r\n  /** GET movie by id. Return `undefined` when id not found */\r\n  getMovieNo404<Data>(id: number): Observable<Movie> {\r\n    const url = `${this.moviesUrl}/?id=${id}`;\r\n    return this.http.get<Movie[]>(url)\r\n      .pipe(\r\n        map(movies => movies[0]), // returns a {0|1} element array\r\n        tap(h => {\r\n          const outcome = h ? 'fetched' : 'did not find';\r\n          this.log(`${outcome} movie id=${id}`);\r\n        }),\r\n        catchError(this.handleError<Movie>(`getMovie id=${id}`))\r\n      );\r\n  }\r\n\r\n  /** GET Movie by id. Will 404 if id not found */\r\n  getMovie(id: number): Observable<Movie> {\r\n    const url = `${this.moviesUrl}/${id}`;\r\n    return this.http.get<Movie>(url).pipe(\r\n      tap(_ => this.log(`fetched movie id=${id}`)),\r\n      catchError(this.handleError<Movie>(`getMovie id=${id}`))\r\n    );\r\n  }\r\n\r\n  /** Log a MovieService message with the MessageService */\r\n  private log(message: string) {\r\n    this.messageService.add(`MovieService: ${message}`);\r\n  }\r\n\r\n  /* GET movies whose name contains search term */\r\n  searchMovies(term: string): Observable<Movie[]> {\r\n    if (!term.trim()) {\r\n      // if not search term, return empty movie array.\r\n      return of([]);\r\n    }\r\n    return this.http.get<Movie[]>(`${this.moviesUrl}/?name=${term}`).pipe(\r\n      tap(x => x.length ?\r\n         this.log(`found movies matching \"${term}\"`) :\r\n         this.log(`no movies matching \"${term}\"`)),\r\n      catchError(this.handleError<Movie[]>('searchMovies', []))\r\n    );\r\n  }\r\n\r\n\r\n\r\n  /** POST: add a new movie to the server */\r\n  addMovie(movie: Movie): Observable<Movie> {\r\n    return this.http.post<Movie>(this.moviesUrl, movie, this.httpOptions).pipe(\r\n      tap((newMovie: Movie) => this.log(`added movie w/ id=${newMovie.id}`)),\r\n      catchError(this.handleError<Movie>('addMovie'))\r\n    );\r\n  }\r\n\r\n  /** DELETE: delete the movie from the server */\r\n  deleteMovie(id: number): Observable<Movie> {\r\n    const url = `${this.moviesUrl}/${id}`;\r\n\r\n    return this.http.delete<Movie>(url, this.httpOptions).pipe(\r\n      tap(_ => this.log(`deleted movie id=${id}`)),\r\n      catchError(this.handleError<Movie>('deleteMovie'))\r\n    );\r\n  }\r\n\r\n  /** PUT: update the movie on the server */\r\n  updateMovie(movie: Movie): Observable<any> {\r\n    return this.http.put(this.moviesUrl, movie, this.httpOptions).pipe(\r\n      tap(_ => this.log(`updated movie id=${movie.id}`)),\r\n      catchError(this.handleError<any>('updateMovie'))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}